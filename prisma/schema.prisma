// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @unique @default(cuid())
  sessions       Session[]
  profile        Profile?
  email          String    @unique
  email_verified Boolean
  username       String    @unique
  password       String
  isNew          Boolean   @default(true)
}

model Profile {
  id                   String       @id @unique @default(cuid())
  user                 User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId               String       @unique
  email                String       @unique
  firstname            String
  avatar               String?
  lastname             String
  username             String       @unique
  projects             Project[]
  assignedTasks        Task[]
  collaboratedProjects Project[]    @relation("ProjectCollaborator")
  comments             Comment[]
  invitedUsers         Invitation[] @relation("UserInvites")
  invites              Invitation[]
  activities           Activity[]   @relation("Activity")
  notifications        Activity[]   @relation("Notification")
  followers            Follow[]     @relation("following")
  following            Follow[]     @relation("follower")
}

model Session {
  id        String   @id @unique @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationCode {
  id        String   @id @unique @default(cuid())
  code      String
  userId    String   @unique
  email     String
  expiresAt DateTime
}

model Project {
  id             String       @id @unique @default(cuid())
  createdBy      Profile      @relation(references: [id], fields: [createdById])
  createdById    String       @unique
  collaborators  Profile[]    @relation("ProjectCollaborator")
  title          String
  tasks          Task[]
  invitations    Invitation[]
  status         TaskProgress @default(INPROGRESS)
  targetDeadline DateTime     @default(now())
}

model Follow {
  id          Int     @id @default(autoincrement())
  follower    Profile @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   Profile @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model Task {
  id          String       @id @unique @default(cuid())
  assigned    Profile?     @relation(references: [id], fields: [assignedId])
  assignedId  String
  title       String
  description String
  deadline    DateTime?
  project     Project      @relation(references: [id], fields: [projectId])
  projectId   String
  status      TaskProgress @default(INPROGRESS)
  comments    Comment[]
}

model Invitation {
  id        String   @id @unique @default(cuid())
  sentBy    Profile  @relation("UserInvites", fields: [sentById], references: [id])
  sentById  String
  sentTo    Profile  @relation(fields: [sentToId], references: [id])
  sentToId  String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
}

model Activity {
  id                   String   @id @unique @default(cuid())
  createdAt            DateTime
  sourceId             Int
  targetId             Int?
  sourceUser           Profile  @relation("Activity", fields: [sourceUserId], references: [id], onDelete: Cascade)
  sourceUserId         String
  targetUser           Profile  @relation("Notification", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetUserId         String
  isNotificationActive Boolean  @default(true)
  isNotificationRead   Boolean  @default(false)
}

model Comment {
  id          String    @id @unique @default(cuid())
  commentor   Profile   @relation(references: [id], fields: [commentorId])
  commentorId String    @unique
  content     String
  task        Task      @relation(references: [id], fields: [taskId])
  taskId      String
  replies     Comment[] @relation("CommentReplies")
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    String?
  createdAt   DateTime  @default(now())
}

enum ActivityType {
  INVITATION
  TASK_MARKED_AS_DONE
  CREATE_FOLLOW
  CREATE_COMMENT
}

enum TaskProgress {
  INPROGRESS
  CANCELLED
  FINISHED
}
